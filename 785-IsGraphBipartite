# Last updated: 4/20/2025, 9:46:50 PM
from collections import deque
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        n = len(graph)
        root = [-1 for i in range(n)]
        queue = deque()
        visited = set()
    
        for i in range(n):
            if i in visited:
                continue
            
            queue.append(i)
            visited.add(i)
            while queue:
                i = queue.popleft()
                for neighbour in graph[i]:
                    if root[neighbour] == -1 and root[i] == -1:
                        root[neighbour] = 0
                        root[i] = 1
                    elif root[i] != -1 and root[neighbour] != -1:
                        if root[neighbour] == root[i]:
                            return False
                    else:
                        if root[neighbour] != -1:
                            root[i] = 1 - root[neighbour]
                        else:
                            root[neighbour] = 1 - root[i]
                    if neighbour not in visited:
                        queue.append(neighbour)
                        visited.add(neighbour)

        return True  
